@mixin transition($transition-property, $transition-time, $method) {
    -webkit-transition: $transition-property $transition-time $method;
    -moz-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
  -webkit-box-shadow:inset $top $left $blur $color;
  -moz-box-shadow:inset $top $left $blur $color;
  box-shadow:inset $top $left $blur $color;
  } @else {
  -webkit-box-shadow: $top $left $blur $color;
  -moz-box-shadow: $top $left $blur $color;
  box-shadow: $top $left $blur $color;
  }
}

@mixin gradient($from, $to) {
background: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
background: -moz-linear-gradient(top, $from, $to);
filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}');
} 

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}

@mixin hoverfocus($color,$decoration)
{
    &:hover,
    &:focus
    {
      color:$color;
      text-decoration: $decoration;
    }
}

 @mixin breakpoint($point) {
 @if $point == desktop {
     @media (min-width: 1028px) { @content ; }
  }
    @else if $point == tablet {
     @media (min-width: 768px) and (max-width:1026px) { @content ; }
  }
  @else if $point == tablet-land {
     @media (min-width: 768px) and (max-width:1026px) and (orientation: landscape) { @content ; }
  }
  @else if $point == mobile {
     @media (max-width: 767px)  { @content ; }

  }
  @else if $point == mobile-land{
    @media (max-width: 767px) and (orientation: landscape) { @content ; }    
  }
}


// generic transform
@mixin transform($transforms) {
  -webkit-transform: $transforms;
  -moz-transform: $transforms;
  -ms-transform: $transforms;
  -o-transform: $transforms;  
  transform: $transforms;
}
// rotate
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}
 
// scale
@mixin scale($scale) {
   @include transform(scale($scale));
} 
// translate
@mixin translate ($x, $y) {
   @include transform(translate($x, $y));
}
// skew
@mixin skew ($x, $y) {
   @include transform(skew(#{$x}deg, #{$y}deg));
}
//transform origin
@mixin transform-origin ($origin) {
  -webkit-transform-origin: $origin;
  -moz-transform-origin: $origin;
  -ms-transform-origin: $origin;
  -o-transform-origin: $origin;
  transform-origin: $origin;
}


// antialiasing mode font rendering

@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}